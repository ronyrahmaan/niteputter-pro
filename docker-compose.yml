version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: niteputter-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: niteputter
      MONGO_INITDB_ROOT_PASSWORD: SecureMongoPass123
      MONGO_INITDB_DATABASE: niteputter_pro
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - niteputter-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: niteputter-redis
    restart: unless-stopped
    command: redis-server --requirepass SecureRedisPass456
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - niteputter-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: niteputter-backend
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-development}
      - MONGODB_URL=mongodb://niteputter:SecureMongoPass123@mongodb:27017/niteputter_pro?authSource=admin
      - REDIS_URL=redis://:SecureRedisPass456@redis:6379
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - niteputter-network
    command: >
      sh -c "
        python scripts/wait_for_db.py &&
        python scripts/seed_all.py --auto &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend
  frontend:
    build:
      context: ./frontend-v2
      dockerfile: Dockerfile
    container_name: niteputter-frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend-v2:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - niteputter-network
    command: npm run dev -- --host 0.0.0.0

  # Nginx (Production only)
  nginx:
    image: nginx:alpine
    container_name: niteputter-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - niteputter-network
    profiles:
      - production

  # Celery Worker (for background jobs)
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: niteputter-celery
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://niteputter:SecureMongoPass123@mongodb:27017/niteputter_pro?authSource=admin
      - REDIS_URL=redis://:SecureRedisPass456@redis:6379
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - niteputter-network
    command: celery -A app.tasks worker --loglevel=info
    profiles:
      - production

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: niteputter-celery-beat
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://niteputter:SecureMongoPass123@mongodb:27017/niteputter_pro?authSource=admin
      - REDIS_URL=redis://:SecureRedisPass456@redis:6379
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    depends_on:
      - mongodb
      - redis
    networks:
      - niteputter-network
    command: celery -A app.tasks beat --loglevel=info
    profiles:
      - production

networks:
  niteputter-network:
    driver: bridge

volumes:
  mongodb_data:
  mongodb_config:
  redis_data:
  backend_logs:
  backend_uploads:
  nginx_cache: