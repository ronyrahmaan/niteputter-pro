name: NitePutter Pro Enhanced CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ismaster:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test environment file
      run: |
        cd backend
        cat > .env.test << EOF
        ENVIRONMENT=test
        DEBUG=true
        MONGO_URL=mongodb://test:test@localhost:27017
        DB_NAME=niteputter_test
        JWT_SECRET=test_jwt_secret_for_ci_cd_pipeline_testing_only
        REDIS_URL=redis://localhost:6379/0
        STRIPE_API_KEY=sk_test_fake_key_for_testing
        STRIPE_PUBLISHABLE_KEY=pk_test_fake_key_for_testing
        SMTP_HOST=localhost
        SMTP_PORT=25
        SMTP_USER=test@test.com
        SMTP_PASSWORD=test
        EOF
        
    - name: Run backend tests
      env:
        ENV_FILE: .env.test
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
        
    - name: Check code formatting
      run: |
        cd backend
        black --check .
        isort --check-only .
        
    - name: Run type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports
        
    - name: Run linting
      run: |
        cd backend
        flake8 . --max-line-length=100 --extend-ignore=E203,W503

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
    - name: Build frontend
      env:
        REACT_APP_BACKEND_URL: https://api.niteputterpro.com/api
        REACT_APP_STRIPE_PUBLISHABLE_KEY: pk_test_fake_key_for_build
      run: |
        cd frontend
        npm run build
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python for load testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install load testing tools
      run: |
        pip install locust
        
    - name: Run basic load test
      run: |
        # Create a basic load test
        cat > load_test.py << 'EOF'
        from locust import HttpUser, task, between
        
        class NitePutterUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def test_homepage(self):
                self.client.get("/")
                
            @task
            def test_products_api(self):
                self.client.get("/api/products")
                
            @task
            def test_health_check(self):
                self.client.get("/api/")
        EOF
        
        echo "Load test created - would run against staging environment"

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.niteputterpro.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: niteputter-backend
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: niteputter-frontend
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg REACT_APP_BACKEND_URL=https://staging-api.niteputterpro.com/api \
          --build-arg REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands (ECS, EKS, etc.)

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://niteputterpro.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: niteputter-backend
        IMAGE_TAG: production-${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: niteputter-frontend
        IMAGE_TAG: production-${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg REACT_APP_BACKEND_URL=https://api.niteputterpro.com/api \
          --build-arg REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_LIVE }} .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment smoke tests..."
        curl -f https://niteputterpro.com/api/ || exit 1
        curl -f https://niteputterpro.com/ || exit 1
        
    - name: Notify team of deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ All tests passed! Ready for deployment."
        
    - name: Notify on failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Check the logs for details."